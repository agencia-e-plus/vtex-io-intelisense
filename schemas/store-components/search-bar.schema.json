{
	"type": "object",
	"additionalProperties": false,
	"title": "Search Bar",
	"markdownDescription": "https://developers.vtex.com/vtex-developer-docs/docs/vtex-store-components-searchbar\n\nSearch Bar is a VTEX Component that shows a search bar with autocomplete options and displays the matching products as well. This component can be imported and used by any VTEX App.\n\n`\"vtex.store-components@3.x\"`",
	"properties": {
		"props": {
			"type": "object",
			"additionalProperties": false,
			"markdownDescription": "All available properties for this block.",
			"properties": {
				"attemptPageTypeSearch": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nIf `true` when clicked on result link of brand, department or category will link to the corresponding brand, department or category page. When `false` will always go to a full text search page.",
					"default": false
				},
				"autocompleteAlignment": {
					"type": "string",
					"markdownDescription": "`enum`\n\nAutocomplete Horizontal alignment.",
					"default": "left",
					"oneOf": [
						{
							"const": "center"
						},
						{
							"const": "left"
						},
						{
							"const": "right"
						}
					]
				},
				"autocompleteFullWidth": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nIf `true`, the autocomplete will fill the whole window horizontally.",
					"default": false
				},
				"autoFocus": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nDefine if the search input should autofocus or not",
					"default": false
				},
				"blurOnSubmit": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nDefine if input should blur on submit.",
					"default": false
				},
				"compactMode": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nDefine when to use the compact version of the component",
					"default": false
				},
				"customSearchPageUrl": {
					"type": "string",
					"markdownDescription": "`string`\n\nTemplate for a custom url. It can have a substring `${term}` used as placeholder to interpolate the searched term. (e.g. `/search?query=${term}`)",
					"default": false
				},
				"displayMode": {
					"type": "string",
					"markdownDescription": "`DisplayMode`\n\nDefine the component display mode, such as which buttons should be visible.",
					"default": "clear-button",
					"oneOf": [
						{
							"const": "clear-button",
							"markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764904-5cc5e580-5261-11ea-9df8-484cf457c266.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764917-60f20300-5261-11ea-8911-11c8fd9582d9.png|height=22px)"
						},
						{
							"const": "search-and-clear-buttons",
							"markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764924-62bbc680-5261-11ea-9f1d-2118274da996.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764928-64858a00-5261-11ea-9ed2-42da887e6641.png|height=22px)"
						},
						{
							"const": "search-button",
							"markdownDescription": "Empty state:\n\n![](https://user-images.githubusercontent.com/12702016/74764929-65b6b700-5261-11ea-815c-ecc9f0c44e0f.png|height=22px)\n\nFilled state:\n\n![](https://user-images.githubusercontent.com/12702016/74764934-66e7e400-5261-11ea-8a86-59da9a1c0faa.png|height=22px)"
						}
					]
				},
				"emptyPlaceholder": {
					"type": "string",
					"markdownDescription": "`string!`\n\nShows a placeholder when the ResultList hasn't results to displayed",
					"default": ""
				},
				"hasIconLeft": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nDefine if the search icon is on left or right position",
					"default": false
				},
				"maxWidth": {
					"type": ["number", "string"],
					"markdownDescription": "`number | string`\n\nMax width of the search bar. If value is a`string`, it must be succeeded by `px`, `em`, `%` etc."
				},
				"minSearchTermLength": {
					"type": "number",
					"markdownDescription": "`number`\n\nIf defined, it will block searches where the term length is lesser than `minSearchTermLength`."
				},
				"openAutocompleteOnFocus": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nDefine if autocomplete should be open on input focus or not.",
					"default": false
				},
				"placeholder": {
					"type": "string",
					"markdownDescription": "`string!`\n\nPlaceholder to be used on the input",
					"default": ""
				},
				"inputType": {
					"type": "string",
					"markdownDescription": "`enum`\n\nDefines the value for the `type` HTML attribute (from the `<input>` field). Possible values are: `search` and `text`. We strongly recommend you to use `search` as it fixes some iOS issues. The `text` value is only kept as default for backwards compatibility.",
					"default": "text",
					"oneOf": [{ "const": "search" }, { "const": "text" }]
				},
				"containerMode": {
					"type": "string",
					"markdownDescription": "`enum`\n\nDefines how the autocomplete component should be displayed",
					"default": "overlay",
					"oneOf": [
						{
							"const": "overlay",
							"markdownDescription": "Suggestions overlapping other components"
						},
						{
							"const": "container",
							"markdownDescription": "Displays the suggestion within a container"
						}
					]
				},
				"disableBlurAndTouchEndHandler": {
					"type": "boolean",
					"markdownDescription": "`boolean`\n\nThe autocomplete can have touchable/clickable components. Interacting with those components may trigger blur and touch events that will close the autocomplete. When set to true, this prop will disable those handlers.",
					"default": false
				}
			}
		}
	}
}
